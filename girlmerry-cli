#!/usr/bin/env perl

use 5.018_000;
use strict;
use warnings;

no if $] >= 5.018, warnings => "experimental::smartmatch";
no if $] >= 5.018, warnings => "experimental::lexical_subs";

use Mojo::Asset::Memory;
use Mojo::UserAgent;
use Mojo::IOLoop;
use Mojo::Util
  qw/ b64_encode url_escape url_unescape camelize decamelize quote dumper /;
use Mojo::JSON qw/ decode_json encode_json /;
use Try::Tiny;

my $client  = Mojo::UserAgent->new;
my $results = 0;

for (@ARGV) {

    my $mem = Mojo::Asset::Memory->new;
    $mem->max_memory_size(2000000);

    $client->get(
        "https://www.girlmerry.com/$ARGV[$results]" => sub {

            my ( $client, $girlmerry ) = @_;

            try {

                for my $item (
                    $girlmerry->res->dom->find(
                        "li[class=item product product-item]")->each
                  )
                {

                    $results++;

                    # Result
                    say "\nRESULT: $results\n";

                    # Name

                    my $name = $item->at("a[class~=product-item-link]")->text;
                    $name =~ s/^\s+|\s+$//g;
                    say decamelize "\tNAME: $name";

                    # Image

                    my $image =
                      $item->at("img[class~=product-image-photo]")->{src};
                    say "\tIMAGE: $image";

                    # Price

                    my $price = $item->at("span[class~=price]")->text;
                    $price =~ s/^\s+|\s+$//g;
                    say decamelize "\tPRICE: $price";

                    # Detail

                    for (
                        split /\n/,
                        $item->at("div[class=product details product-item-details] > script")->text
                      )
                    {

                        if (m/.*jsonSwatchConfig/g) {

                            s/^\s+|\s+$//g;

                            my ($jsonSwatchConfig) =
                              ( $_ =~ m/jsonSwatchConfig: (.*),/g );
                            $jsonSwatchConfig = decode_json $jsonSwatchConfig;

                            my ( @sizes, @colors );

                            for my $id ( keys %{$jsonSwatchConfig} ) {
                                for my $code (
                                    keys %{ $jsonSwatchConfig->{$id} } )
                                {
                                    for my $key (
                                        keys %{ $jsonSwatchConfig->{$id}->{$code} } )
                                    {

                                        next if $key ne 'label';

                                        push @sizes,
                                          $jsonSwatchConfig->{$id}->{$code}
                                          ->{$key}
                                          if $jsonSwatchConfig->{$id}->{$code}
                                          ->{$key} =~
                                          m/^[S|M|L|XL|XXL|3XL|OS]$/g;
                                    }
                                }
                            }

                            @sizes = reverse sort(@sizes);
                            my $sizes = join( ",", @sizes );
                            say "\tSIZES: $sizes" unless scalar @sizes == 0;
                        }
                    }
                }
            }
        }
    );
}

Mojo::IOLoop->start unless Mojo::IOLoop->is_running;
